{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Напиши скрипт, який після сабміту форми створює проміс. В середині колбека цього промісу через вказану користувачем кількість мілісекунд проміс має виконуватися (при fulfilled) або відхилятися (при rejected), залежно від обраної опції в радіокнопках. Значенням промісу, яке передається як аргумент у методи resolve/reject, має бути значення затримки в мілісекундах.\n\n// Створений проміс треба опрацювати у відповідних для вдалого/невдалого виконання методах.\n\n// Якщо проміс виконується вдало, виводь у консоль наступний рядок, де delay — це значення затримки виклику промісу в мілісекундах.\n\n// `✅ Fulfilled promise in ${delay}ms`;\n\n// Якщо проміс буде відхилено, то виводь у консоль наступний рядок, де delay — це значення затримки промісу в мілісекундах.\n\n// `❌ Rejected promise in ${delay}ms`\n\nconst form = document.querySelector('form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputFulfilled = document.querySelector('input[value=\"fulfilled\"]');\nconst inputRejected = document.querySelector('input[value=\"rejected\"]');\n\nform.addEventListener('submit', sendDelay);\n\nfunction sendDelay(event) {\n  event.preventDefault(); // Запобігає перезавантаженню сторінки\n\n  const delayValue = Number(inputDelay.value);\n  const isFulfilled = inputFulfilled.checked; // Перевіряємо, яка кнопка вибрана\n\n  userDelayValue(delayValue, isFulfilled)\n    .then(delay => {\n      iziToast.success({\n        title: 'Success',\n        message: `✅ Fulfilled promise in ${delay}ms`,\n        position: 'topRight',\n        color: 'green',\n      });\n      console.log(`✅ Fulfilled promise in ${delay}ms`);\n    })\n    .catch(delay => {\n      iziToast.error({\n        title: 'Error',\n        message: `❌ Rejected promise in ${delay}ms`,\n        position: 'topRight',\n        color: 'red',\n      });\n      console.log(`❌ Rejected promise in ${delay}ms`);\n    });\n}\n\nfunction userDelayValue(delay, isFulfilled) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (isFulfilled) {\n        resolve(delay);\n      } else {\n        reject(delay);\n      }\n    }, delay);\n  });\n}\n"],"names":["form","inputDelay","inputFulfilled","sendDelay","event","delayValue","isFulfilled","userDelayValue","delay","iziToast","resolve","reject"],"mappings":"wIAeA,MAAMA,EAAO,SAAS,cAAc,MAAM,EACpCC,EAAa,SAAS,cAAc,qBAAqB,EACzDC,EAAiB,SAAS,cAAc,0BAA0B,EAClD,SAAS,cAAc,yBAAyB,EAEtEF,EAAK,iBAAiB,SAAUG,CAAS,EAEzC,SAASA,EAAUC,EAAO,CACxBA,EAAM,eAAc,EAEpB,MAAMC,EAAa,OAAOJ,EAAW,KAAK,EACpCK,EAAcJ,EAAe,QAEnCK,EAAeF,EAAYC,CAAW,EACnC,KAAKE,GAAS,CACbC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,0BAA0BD,CAAK,KACxC,SAAU,WACV,MAAO,OACf,CAAO,EACD,QAAQ,IAAI,0BAA0BA,CAAK,IAAI,CACrD,CAAK,EACA,MAAMA,GAAS,CACdC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,yBAAyBD,CAAK,KACvC,SAAU,WACV,MAAO,KACf,CAAO,EACD,QAAQ,IAAI,yBAAyBA,CAAK,IAAI,CACpD,CAAK,CACL,CAEA,SAASD,EAAeC,EAAOF,EAAa,CAC1C,OAAO,IAAI,QAAQ,CAACI,EAASC,IAAW,CACtC,WAAW,IAAM,CACXL,EACFI,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,CACH"}